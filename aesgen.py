#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2021 Mate Soos
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2
# of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


# based on the Wikipedia Article https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
# Also see https://gist.github.com/bonsaiviking/5571001
#        self.nb = 4
#        self.nr = 10
#        self.nk = 4


import os
import sys
import time
import random
import numpy as np

key = []
plaintext = []
ciphertext = []
key_schedule = []
rounds = 10

nvars = 0

def add_base_vars():
    key = list(range(v, v+128))
    v+=128

    plaintext = list(range(v, v+128))
    v+=128

    ciphertext = list(range(v, v+128))
    v+=128


def doit():
    expand_keys()



sbox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a]

def rotate(v):
  assert len(v) == 4*8

  ret = [0]*len(v)
  ret[0:3*8] = v[1*8:]
  ret[3*8:] = v[0:1*8]

  return ret


def xor_clause(vs, rhs):
    assert type(vs) == list

    toprint = "x"
    for i in range(len(vs)):
        # default rhs is TRUE
        if i == 0:
            if not rhs:
                toprint+="%d " % -vs[i]
            else:
                toprint+="%d " % vs[i]
        else:
            toprint+="%d " % vs[i]

    toprint +="0"
    print(toprint)


def do_xor(vs):
    assert type(vs) == list

    tmp = v
    v+=1
    xor_clause(vs+[tmp], False)
    return tmp

def binary_invert(v, inv):
    if inv:
        return -v
    else:
        return v

# from https://github.com/agohr/ches2018/blob/master/sources/aes_ks.py
# expand a 16-byte AES key
def ks_expand(key,n=16,b=176):
  expanded_key = list(range(v, v+b*8))
  v+=b

  #set the first 16 bytes to the original key
  expanded_key[0:16*8] = key
  #continue adding 16 bytes until b bytes have been generated
  i = 1*8
  j = 16*8
  while (j < b):
    tmp = list(expanded_key[j-4*8:j])
    tmp = rotate(tmp)
    tmp = np.vectorize(lambda x: sbox[x])(tmp)

    for k in range(8):
        tmp[k] = binary_invert(tmp[k], (rcon[i/8]>>k)&1)

    for k in range(4*8):
        tmp[k] = do_xor(tmp[k] + [expanded_key[j-n*8+k])

    expanded_key[j:j+4*8] = list(tmp)

    for offset in range(j+4*8, j+16*8):
        for k in range(4*8):
              expanded_key[offset+k] = do_xor(expanded_key[offset-n*8+k], tmp[k])

    j += 16*8;
    i += 1*8;
  return expanded_key


